-- Decompiled with the Synapse X Luau decompiler.
 --NOTE: Currently in beta! Not representative of final product.

-- NOTE: Builtins are approximations and are not actually present in the original code.
local function __builtin_settop(table, index, ...)
	local va, count = {...}, select("#", ...)
	for i = index, index + count - 1 do
		table[i] = va[i]
	end
end
-- END BUILTINS

return (function(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14, p15, p16, p17, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42) -- [line 3] anonymous function
	local g_tostring_1 = tostring;
	local u1 = nil;
	local u2 = nil;
	local v1 = 1;
	local g_select_2 = select;
	local g_pcall_3 = pcall;
	while (v1 <= 1) do
		if (v1 == 0) then
			u2 = string.sub;
			v1 = 2;
		else
			u1 = p29;
			v1 = 0;
		end
	end
	local v2 = 3;
	local u3 = nil;
	local u4 = nil;
	local u5 = nil;
	local v3 = nil;
	while true do
		if (v2 <= 1) then
			if (v2 == 0) then
				v3 = p21;
				v2 = 4;
			else
				u5 = string.char;
				v2 = 0;
			end
		else
			if (v2 == 2) then
				u4 = 4503599627370496;
				v2 = 1;
			else
				u3 = p17;
				v2 = 2;
			end
		end
		if (v2 > 3) then
			break;
		end
	end
	local g_next_4 = next;
	local g_tonumber_5 = tonumber;
	local v4 = p20;
	local g_setmetatable_6 = setmetatable;
	local v5 = bit or p15;
	local g_rawget_7 = rawget;
	local v6 = 1;
	local u6 = nil;
	local u7 = nil;
	while (v6 <= 2) do
		if (v6 <= 0) then
			u7 = p6.byte;
			v6 = 3;
		else
			if (v6 == 1) then
				u6 = {
					6,
					3,
					1
				};
				v6 = 2;
			else
				v6 = 0;
			end
		end
	end
	local u8 = nil;
	local v7 = 2;
	local u9 = nil;
	while (v7 ~= 3) do
		if (v7 <= 0) then
			local u10 = p34;
			local u11 = p23;
			u8 = function(p43, p44, p45) -- [line 3] anonymous function
				--[[
					Upvalues: 
						[1] = u8
						[2] = u10
						[3] = u11
				--]]
				local v8 = nil;
				local v9 = 0;
				local v10 = v9;
				if (not (v10 >= 2)) then
					while true do
						if (v9 <= 0) then
							if (p45 < p44) then
								return;
							end
						else
							if (v9 == 1) then
								v8 = (p45 - p44) + 1;
							else
								if (v8 >= 8) then
									return p43[p44], p43[p44 + 1], p43[p44 + 2], p43[p44 + 3], p43[p44 + 4], p43[p44 + 5], p43[p44 + 6], p43[p44 + 7], u8(p43, p44 + 8, p45);
								end
								local v11 = u10;
								if (v11 <= v8) then
									return p43[p44], p43[p44 + 1], p43[p44 + 2], p43[p44 + 3], p43[p44 + 4], p43[p44 + 5], p43[p44 + 6], u8(p43, p44 + 7, p45);
								end
								if (v8 >= 6) then
									return p43[p44], p43[p44 + 1], p43[p44 + 2], p43[p44 + 3], p43[p44 + 4], p43[p44 + u11], u8(p43, p44 + 6, p45);
								end
								if (v8 >= 5) then
									return p43[p44], p43[p44 + 1], p43[p44 + 2], p43[p44 + 3], p43[p44 + 4], u8(p43, p44 + 5, p45);
								end
								if (v8 >= 4) then
									return p43[p44], p43[p44 + 1], p43[p44 + 2], p43[p44 + 3], u8(p43, p44 + 4, p45);
								end
								if (v8 >= 3) then
									return p43[p44], p43[p44 + 1], p43[p44 + 2], u8(p43, p44 + 3, p45);
								end
								if (v8 >= 2) then
									return p43[p44], p43[p44 + 1], u8(p43, p44 + 2, p45);
								end
								return p43[p44], u8(p43, p44 + 1, p45);
							end
						end
						local v12 = v9 + 1;
						v9 = v12;
						if (v12 > 2) then
							break;
						end
					end
				end
			end;
			v7 = 1;
		else
			if (v7 == 1) then
				v7 = 3;
			else
				local v13 = unpack;
				if (not v13) then
					v13 = p12.unpack;
				end
				u9 = v13;
				v7 = 0;
			end
		end
	end
	local v14 = false;
	local g_getfenv_8 = getfenv;
	local g_getfenv_9 = g_getfenv_8;
	local t_rep_10 = p6.rep;
	local v15;
	if (g_getfenv_8) then
		v15 = g_getfenv_9();
		if (not v15) then
			v14 = true;
		end
	else
		v14 = true;
	end
	if (v14) then
		v15 = p32;
	end
	local u12 = v15;
	local u13 = 1;
	local v16 = v3;
	local v17 = u2("LPH}
	local u14 = g_tonumber_5;
	local v18 = v16(v17, "(.)(.)", function(p46, p47) -- [line 3] anonymous function
		--[[
			Upvalues: 
				[1] = u1
				[2] = u14
				[3] = u5
				[4] = t_rep_10
		--]]
		if (p47 == "H") then
			u1 = u14(p46);
			return "";
		end
		local v19 = u5(u14(p46 .. p47, 16));
		if (not u1) then
			return v19;
		end
		local v20 = t_rep_10(v19, u1);
		u1 = nil;
		return v20;
	end);
	local u15 = 9007199254740992;
	local u16 = 2147483648;
	local v21 = {};
	v21[0] = 1;
	v21[1] = 2;
	v21[2] = 4;
	v21[3] = p8;
	v21[4] = 16;
	v21[5] = 32;
	v21[6] = 64;
	v21[7] = 128;
	v21[8] = 256;
	v21[9] = 512;
	v21[10] = 1024;
	v21[11] = 2048;
	v21[12] = 4096;
	v21[13] = 8192;
	v21[14] = 16384;
	v21[15] = 32768;
	v21[16] = 65536;
	v21[17] = 131072;
	v21[18] = 262144;
	v21[19] = 524288;
	v21[20] = 1048576;
	v21[21] = p4;
	v21[22] = 4194304;
	v21[23] = 8388608;
	v21[24] = 16777216;
	v21[25] = p2;
	v21[26] = 67108864;
	v21[27] = 134217728;
	v21[28] = 268435456;
	v21[29] = p22;
	v21[30] = 1073741824;
	v21[31] = u16;
	v21[32] = 4294967296;
	local v22 = v21;
	v21[35] = 34359738368;
	v21[p5] = 4398046511104;
	v21[49] = 562949953421312;
	local v23 = 0;
	local u17 = nil;
	while (v23 == 0) do
		u17 = function(p48, p49, p50) -- [line 3] anonymous function
			--[[
				Upvalues: 
					[1] = u8
					[2] = u9
			--]]
			if (not p50) then
				p50 = #p48;
			end
			local v24 = 0;
			local v25 = nil;
			while (v24 == 0) do
				v25 = (p50 - 1) + 1;
				v24 = 1;
			end
			if (v25 > 7997) then
				return u8(p48, 1, p50);
			end
			return u9(p48, 1, p50);
		end;
		v23 = 1;
	end
	local u18 = v18;
	local u19 = p13;
	local u20;
	u20 = function() -- [line 3] anonymous function
		--[[
			Upvalues: 
				[1] = u7
				[2] = u18
				[3] = u13
				[4] = u19
		--]]
		local v26 = 0;
		local v27 = nil;
		while true do
			if (v26 <= 0) then
				v27 = u7(u18, u13, u13);
				v26 = 2;
			else
				if (v26 == 1) then
					break;
				end
				u13 = u13 + u19;
				v26 = 1;
			end
		end
		return v27;
	end;
	local u21 = nil;
	local u22 = nil;
	local u23 = nil;
	local v28 = 0;
	local v29 = v28;
	if (not (v29 >= 3)) then
		while true do
			local v30 = false;
			if (v28 <= 1) then
				if (v28 == 0) then
					local v31 = {};
					local v32 = {};
					v32[0] = 0;
					v32[1] = 1;
					v32[2] = 2;
					v32[3] = 3;
					v32[4] = 4;
					v32[5] = 5;
					v32[6] = 6;
					v32[7] = p34;
					v32[8] = 8;
					v32[9] = 9;
					v32[10] = 10;
					v32[11] = 11;
					v32[12] = 12;
					v32[13] = 13;
					v32[14] = 14;
					v32[15] = 15;
					v31[0] = v32;
					local v33 = {};
					v33[0] = 1;
					v33[1] = 0;
					v33[2] = 3;
					v33[3] = 2;
					v33[4] = 5;
					v33[5] = 4;
					v33[6] = 7;
					v33[7] = 6;
					v33[8] = 9;
					v33[9] = 8;
					v33[10] = 11;
					v33[11] = 10;
					v33[12] = 13;
					v33[13] = 12;
					v33[14] = 15;
					v33[15] = 14;
					local v34 = {};
					v34[0] = 2;
					v34[1] = 3;
					v34[2] = 0;
					v34[3] = 1;
					v34[4] = 6;
					v34[5] = 7;
					v34[6] = 4;
					v34[7] = 5;
					v34[8] = 10;
					v34[9] = 11;
					v34[10] = 8;
					v34[11] = 9;
					v34[12] = 14;
					v34[13] = 15;
					v34[14] = 12;
					v34[15] = 13;
					local v35 = {};
					v35[0] = 3;
					v35[1] = 2;
					v35[2] = 1;
					v35[3] = 0;
					v35[4] = 7;
					v35[5] = 6;
					v35[6] = 5;
					v35[7] = 4;
					v35[8] = p19;
					v35[9] = 10;
					v35[10] = 9;
					v35[11] = 8;
					v35[12] = 15;
					v35[13] = 14;
					v35[14] = p11;
					v35[15] = 12;
					local v36 = {};
					v36[0] = 4;
					v36[1] = 5;
					v36[2] = 6;
					v36[3] = 7;
					v36[4] = 0;
					v36[5] = 1;
					v36[6] = 2;
					v36[7] = 3;
					v36[8] = 12;
					v36[9] = 13;
					v36[10] = 14;
					v36[11] = 15;
					v36[12] = 8;
					v36[13] = 9;
					v36[14] = 10;
					v36[15] = 11;
					local v37 = {};
					v37[0] = 5;
					v37[1] = 4;
					v37[2] = p34;
					v37[3] = 6;
					v37[4] = 1;
					v37[5] = 0;
					v37[6] = 3;
					v37[7] = 2;
					v37[8] = 13;
					v37[9] = 12;
					v37[10] = 15;
					v37[11] = 14;
					v37[12] = 9;
					v37[13] = 8;
					v37[14] = 11;
					v37[15] = 10;
					local v38 = {};
					v38[0] = 6;
					v38[1] = 7;
					v38[2] = 4;
					v38[3] = 5;
					v38[4] = 2;
					v38[5] = 3;
					v38[6] = p3;
					v38[7] = 1;
					v38[8] = 14;
					v38[9] = 15;
					v38[10] = p18;
					v38[11] = 13;
					v38[12] = 10;
					v38[13] = 11;
					v38[14] = 8;
					v38[15] = p35;
					local v39 = {};
					v39[0] = 7;
					v39[1] = p36;
					v39[2] = 5;
					v39[3] = 4;
					v39[4] = 3;
					v39[5] = 2;
					v39[6] = 1;
					v39[7] = 0;
					v39[8] = 15;
					v39[9] = 14;
					v39[10] = 13;
					v39[11] = p18;
					v39[12] = 11;
					v39[13] = 10;
					v39[14] = 9;
					v39[15] = 8;
					local v40 = {};
					v40[p3] = 8;
					v40[1] = 9;
					v40[2] = 10;
					v40[3] = 11;
					v40[4] = 12;
					v40[5] = 13;
					v40[6] = 14;
					v40[7] = 15;
					v40[8] = 0;
					v40[9] = 1;
					v40[10] = 2;
					v40[11] = 3;
					v40[12] = 4;
					v40[13] = 5;
					v40[14] = p36;
					v40[15] = 7;
					local v41 = {};
					v41[0] = 9;
					v41[1] = 8;
					v41[2] = 11;
					v41[3] = 10;
					v41[4] = 13;
					v41[5] = 12;
					v41[6] = 15;
					v41[7] = 14;
					v41[8] = 1;
					v41[9] = 0;
					v41[10] = 3;
					v41[11] = 2;
					v41[12] = 5;
					v41[13] = 4;
					v41[14] = 7;
					v41[15] = p36;
					local v42 = {};
					v42[0] = 10;
					v42[1] = 11;
					v42[2] = 8;
					v42[3] = 9;
					v42[4] = p39;
					v42[5] = p25;
					v42[6] = 12;
					v42[7] = 13;
					v42[8] = 2;
					v42[9] = 3;
					v42[10] = 0;
					v42[11] = 1;
					v42[12] = 6;
					v42[13] = 7;
					v42[14] = p16;
					v42[15] = 5;
					local v43 = {};
					v43[0] = p19;
					v43[1] = 10;
					v43[2] = 9;
					v43[3] = 8;
					v43[4] = 15;
					v43[5] = 14;
					v43[6] = 13;
					v43[7] = 12;
					v43[8] = 3;
					v43[9] = 2;
					v43[10] = 1;
					v43[11] = 0;
					v43[12] = p34;
					v43[13] = 6;
					v43[14] = 5;
					v43[15] = 4;
					local v44 = {};
					v44[0] = 12;
					v44[1] = 13;
					v44[2] = 14;
					v44[3] = 15;
					v44[4] = 8;
					v44[5] = 9;
					v44[6] = 10;
					v44[7] = 11;
					v44[8] = 4;
					v44[9] = p23;
					v44[10] = 6;
					v44[11] = 7;
					v44[12] = 0;
					v44[13] = 1;
					v44[14] = 2;
					v44[15] = 3;
					local v45 = {};
					v45[0] = 13;
					v45[1] = 12;
					v45[2] = 15;
					v45[3] = 14;
					v45[4] = p35;
					v45[5] = 8;
					v45[6] = 11;
					v45[7] = 10;
					v45[8] = 5;
					v45[9] = 4;
					v45[10] = 7;
					v45[11] = 6;
					v45[12] = 1;
					v45[13] = 0;
					v45[14] = 3;
					v45[15] = 2;
					local v46 = {};
					v46[0] = 14;
					v46[1] = 15;
					v46[2] = 12;
					v46[3] = 13;
					v46[4] = 10;
					v46[5] = p19;
					v46[6] = p8;
					v46[7] = 9;
					v46[8] = 6;
					v46[9] = 7;
					v46[10] = 4;
					v46[11] = 5;
					v46[12] = 2;
					v46[13] = 3;
					v46[14] = p3;
					v46[15] = 1;
					local v47 = {};
					v47[0] = 15;
					v47[1] = 14;
					v47[2] = 13;
					v47[3] = 12;
					v47[4] = 11;
					v47[5] = 10;
					v47[6] = 9;
					v47[7] = 8;
					v47[8] = p34;
					v47[9] = 6;
					v47[10] = 5;
					v47[11] = 4;
					v47[12] = 3;
					v47[13] = 2;
					v47[14] = 1;
					v47[15] = 0;
					v31[1] = v33;
					v31[2] = v34;
					v31[3] = v35;
					v31[4] = v36;
					v31[5] = v37;
					v31[6] = v38;
					v31[7] = v39;
					v31[8] = v40;
					v31[9] = v41;
					v31[10] = v42;
					v31[11] = v43;
					v31[12] = v44;
					v31[13] = v45;
					v31[14] = v46;
					v31[15] = v47;
					u21 = v31;
					v30 = true;
				else
					v30 = true;
				end
			else
				if (v28 == 2) then
					local v48 = false;
					local v49;
					if (v5) then
						v49 = v5.bxor;
						if (not v49) then
							v48 = true;
						end
					else
						v48 = true;
					end
					if (v48) then
						local u24 = p37;
						v49 = function(p51, p52) -- [line 3] anonymous function
							--[[
								Upvalues: 
									[1] = u24
									[2] = u21
							--]]
							local v50 = 2;
							local v51 = nil;
							local v52 = nil;
							while true do
								if (v50 <= 1) then
									if (v50 == 0) then
										p52 = p52 % 4294967296;
										v50 = 3;
									else
										v51 = 1;
										v50 = 0;
									end
								else
									if (v50 == 2) then
										p51 = p51 % 4294967296;
										v50 = 1;
									else
										v52 = 0;
										v50 = 4;
									end
								end
								if (v50 >= 4) then
									break;
								end
							end
							while ((p51 > 0) and (p52 > 0)) do
								local v53 = nil;
								local v54 = nil;
								local v55 = 0;
								while true do
									if (v55 <= 1) then
										if (v55 == 0) then
											v53 = p51 % 16;
											v55 = 1;
										else
											v54 = p52 % 16;
											v55 = 3;
										end
									else
										if (v55 == 2) then
											p51 = (p51 - v53) / u24;
											v55 = 4;
										else
											v52 = v52 + (u21[v53][v54] * v51);
											v55 = 2;
										end
									end
									if (v55 >= 4) then
										break;
									end
								end
								p52 = (p52 - v54) / 16;
								v51 = v51 * 16;
							end
							return (v52 + (p51 * v51)) + (p52 * v51);
						end;
					end
					u22 = v49;
					v30 = true;
				else
					local v56 = false;
					local v57;
					if (v5) then
						v57 = v5[p31];
						if (not v57) then
							v56 = true;
						end
					else
						v56 = true;
					end
					if (v56) then
						v57 = function(p53, p54) -- [line 3] anonymous function
							--[[
								Upvalues: 
									[1] = u22
							--]]
							local v58 = 0;
							local v59 = v58;
							if (not (v59 >= 2)) then
								while true do
									if (v58 <= 0) then
										p53 = p53 % 4294967296;
									else
										if (v58 == 1) then
											p54 = p54 % 4294967296;
										else
											break;
										end
									end
									local v60 = v58 + 1;
									v58 = v60;
									if (v60 > 2) then
										break;
									end
								end
								return ((p53 + p54) - u22(p53, p54)) / 2;
							end
						end;
					end
					u23 = v57;
					v30 = true;
				end
			end
			if (v30) then
				local v61 = v28 + 1;
				v28 = v61;
				if (v61 > 3) then
					break;
				end
			end
		end
	end
	local v62 = false;
	local g_error_11 = error;
	local v63;
	if (v5) then
		v63 = v5.bor;
		if (not v63) then
			v62 = true;
		end
	else
		v62 = true;
	end
	if (v62) then
		v63 = function(p55, p56) -- [line 3] anonymous function
			--[[
				Upvalues: 
					[1] = u23
			--]]
			local v64 = 2;
			while (not (v64 <= 0)) do
				if (v64 == 1) then
					p56 = p56 % 4294967296;
					v64 = 0;
				else
					p55 = p55 % 4294967296;
					v64 = 1;
				end
			end
			return 4294967295 - u23(4294967295 - p55, 4294967295 - p56);
		end;
	end
	local v65 = false;
	local v66;
	if (v5) then
		v66 = v5.bnot;
		if (not v66) then
			v65 = true;
		end
	else
		v65 = true;
	end
	if (v65) then
		v66 = function(p57) -- [line 3] anonymous function
			return 4294967295 - (p57 % 4294967296);
		end;
	end
	local v67 = 0;
	local u25 = nil;
	local u26 = nil;
	while (v67 <= 2) do
		if (v67 <= 0) then
			local v68 = v5;
			if (v68) then
				v68 = v5[p28];
			end
			u25 = v68;
			v67 = 1;
		else
			if (v67 == 1) then
				local v69 = v5;
				if (v69) then
					v69 = v5.rshift;
				end
				u26 = v69;
				v67 = 2;
			else
				local v70 = u25;
				if (not v70) then
					local u27 = p3;
					local u28 = v22;
					v70 = function(p58, p59) -- [line 3] anonymous function
						--[[
							Upvalues: 
								[1] = u27
								[2] = u26
								[3] = u28
						--]]
						local v71 = 2;
						while true do
							if (v71 <= 0) then
								return (p58 * u28[p59]) % 4294967296;
							end
							if (v71 == 1) then
								if (p59 < 0) then
									return u26(p58, -p59);
								end
								v71 = 0;
							else
								if (p59 >= 32) then
									return u27;
								end
								v71 = 1;
							end
						end
					end;
				end
				u25 = v70;
				v67 = 3;
			end
		end
	end
	local v72 = 0;
	local u29 = nil;
	while true do
		if (v72 == 0) then
			local v73 = u26;
			if (not v73) then
				local u30 = v22;
				v73 = function(p60, p61) -- [line 3] anonymous function
					--[[
						Upvalues: 
							[1] = u25
							[2] = u30
					--]]
					local v74 = nil;
					local v75 = 0;
					local v76 = v75;
					if (not (v76 >= 3)) then
						while true do
							if (v75 <= 1) then
								if (v75 == 0) then
									if (p61 >= 32) then
										return 0;
									end
								else
									if (p61 < 0) then
										return u25(p60, -p61);
									end
								end
							else
								if (v75 == 2) then
									v74 = (p60 % 4294967296) / u30[p61];
								else
									return v74 - (v74 % 1);
								end
							end
							local v77 = v75 + 1;
							v75 = v77;
							if (v77 > 3) then
								break;
							end
						end
					end
				end;
			end
			u26 = v73;
			v72 = 1;
		else
			local v78 = {};
			v78[3] = 4;
			v78[2] = 2;
			v78[0] = 4;
			v78[4] = 4;
			v78[9] = 1;
			v78[2] = 9;
			v78[p16] = 9;
			v78[7] = 0;
			v78[8] = p3;
			v78[6] = 2;
			v78[1] = 5;
			u29 = v78;
			v72 = 2;
		end
		if (v72 > 1) then
			break;
		end
	end
	local u31 = nil;
	local u32 = nil;
	local u33 = nil;
	local u34 = nil;
	local u35 = nil;
	local u36 = v22;
	local v79;
	v79 = function(p62, p63, p64) -- [line 3] anonymous function
		--[[
			Upvalues: 
				[1] = u36
		--]]
		local v80 = (p62 / u36[p63]) % u36[p64];
		local v81 = 0;
		while (v81 == 0) do
			v80 = v80 - (v80 % 1);
			v81 = 1;
		end
		return v80;
	end;
	local g_setfenv_12 = setfenv;
	local v82 = 0;
	local v83 = v82;
	if (not (v83 >= 4)) then
		while true do
			if (v82 <= 1) then
				if (v82 == 0) then
					local u37 = v18;
					u31 = function() -- [line 3] anonymous function
						--[[
							Upvalues: 
								[1] = u7
								[2] = u37
								[3] = u13
						--]]
						local v84, v85, v86, v87 = u7(u37, u13, u13 + 3);
						u13 = u13 + 4;
						return (((v87 * 16777216) + (v86 * 65536)) + (v85 * 256)) + v84;
					end;
				else
					u32 = function() -- [line 3] anonymous function
						--[[
							Upvalues: 
								[1] = u16
								[2] = u31
						--]]
						local v88 = 2;
						local v89 = nil;
						local v90 = nil;
						while true do
							if (v88 <= 0) then
								if (v90 == 0) then
									return v89;
								end
								local v91 = u16;
								if (v91 <= v90) then
									v90 = v90 - 4294967296;
								end
								v88 = 1;
							else
								if (v88 == 1) then
									return (v90 * 4294967296) + v89;
								end
								v89 = u31();
								v90 = u31();
								v88 = 0;
							end
						end
					end;
				end
			else
				if (v82 <= 2) then
					local u38 = v79;
					local u39 = p14;
					local u40 = p33;
					local u41 = p3;
					u33 = function() -- [line 3] anonymous function
						--[[
							Upvalues: 
								[1] = u38
								[2] = u39
								[3] = u40
								[4] = u31
								[5] = u4
								[6] = u41
						--]]
						local v92 = 0;
						local v93 = nil;
						local v94 = nil;
						local v95 = nil;
						local v96 = nil;
						local v97 = nil;
						local v98 = nil;
						while true do
							if (v92 <= 3) then
								if (v92 <= 1) then
									if (v92 == 0) then
										v93 = u31();
										v92 = 6;
									else
										return (v95 * ((2) ^ (v96 - 1023))) * ((v98 / u4) + v97);
									end
								else
									if (v92 == 2) then
										v98 = (u38(v94, 0, u40) * 4294967296) + v93;
										v92 = 5;
									else
										v95 = -1 ^ u38(v94, u39, 1);
										v92 = 7;
									end
								end
							else
								if (v92 <= 5) then
									if (v92 == 4) then
										if ((v93 == 0) and (v94 == 0)) then
											return 0;
										end
										v92 = 3;
									else
										if (v96 == 0) then
											if (v98 == 0) then
												return v95 * 0;
											end
											v96 = 1;
											v97 = 0;
										else
											if (v96 == 2047) then
												if (v98 == 0) then
													return v95 * (u41 / 0);
												end
												return v95 * (1/0);
											end
										end
										v92 = 1;
									end
								else
									if (v92 <= 6) then
										v94 = u31();
										v92 = 4;
									else
										if (v92 == 7) then
											v96 = u38(v94, 20, 11);
											v92 = 8;
										else
											v97 = 1;
											v92 = 2;
										end
									end
								end
							end
						end
					end;
				else
					if (v82 == 3) then
						local u42 = v18;
						local u43 = v22;
						u34 = function() -- [line 3] anonymous function
							--[[
								Upvalues: 
									[1] = u7
									[2] = u42
									[3] = u13
									[4] = u43
							--]]
							local v99 = 0;
							local v100 = 0;
							while true do
								local v101 = false;
								local v102 = false;
								local v103 = u7(u42, u13, u13);
								local v104 = v103;
								u13 = u13 + 1;
								local v105;
								if (v103 > 127) then
									v105 = v104 - 128;
									if (v105) then
										v102 = true;
									else
										v101 = true;
									end
								else
									v101 = true;
								end
								if (v101) then
									v105 = v104;
									v102 = true;
								end
								if (v102) then
									v100 = v100 + (v105 * u43[v99]);
									if (v104 < 128) then
										break;
									end
									v99 = v99 + 7;
								end
							end
							return v100;
						end;
					else
						u35 = p1;
					end
				end
			end
			local v106 = v82 + 1;
			v82 = v106;
			if (v106 > 4) then
				break;
			end
		end
	end
	local u44 = u20();
	local v107 = 2;
	local u45 = nil;
	local u46 = nil;
	local u47 = nil;
	while (v107 <= 2) do
		if (v107 <= 0) then
			u46 = {};
			v107 = 1;
		else
			if (v107 == 1) then
				local u48 = p10;
				local u49 = v18;
				local u50 = p13;
				u47 = function(p65) -- [line 3] anonymous function
					--[[
						Upvalues: 
							[1] = u31
							[2] = u13
							[3] = u5
							[4] = u17
							[5] = u44
							[6] = u48
							[7] = u22
							[8] = u7
							[9] = u49
							[10] = u50
					--]]
					local v108 = u31();
					local v109 = "";
					local v110 = 1;
					while (not (v110 <= 0)) do
						if (v110 == 1) then
							local v111 = false;
							local v112 = 1;
							local v113 = v108;
							local v114 = v113;
							local v115 = v112;
							if (v113 <= v115) then
								v111 = true;
							else
								while true do
									local v116 = (v112 + 7997) - 1;
									local v117 = 1;
									local v118 = nil;
									while true do
										local v119 = false;
										if (v117 <= 1) then
											if (v117 == 0) then
												v118 = {u7(u49, (u13 + v112) - 1, (u13 + v116) - u50)};
												v117 = 3;
												v119 = true;
											else
												if (v108 < v116) then
													v116 = v108;
												end
												v117 = 0;
												v119 = true;
											end
										else
											if (v117 == 2) then
												v109 = v109 .. u5(u17(v118));
												v117 = 4;
												v119 = true;
											else
												local v120 = false;
												local v121 = 1;
												local v122 = #v118;
												local v123 = v122;
												local v124 = v121;
												if (v122 <= v124) then
													v120 = true;
												else
													while true do
														local v125 = 0;
														while (v125 == 0) do
															v118[v121] = u22(v118[v121], u44);
															v125 = 1;
														end
														u44 = ((p65 * u44) + 125) % u48;
														local v126 = v121 + 1;
														v121 = v126;
														local v127 = v123;
														if (v127 < v126) then
															v120 = true;
															break;
														end
													end
												end
												if (v120) then
													v117 = 2;
													v119 = true;
												end
											end
										end
										if (v119) then
											if (v117 > 3) then
												break;
											end
										end
									end
									local v128 = v112 + 7997;
									v112 = v128;
									local v129 = v114;
									if (v129 < v128) then
										v111 = true;
										break;
									end
								end
							end
							if (v111) then
								v110 = 2;
							end
						else
							u13 = u13 + v108;
							v110 = 0;
						end
					end
					return v109;
				end;
				v107 = 3;
			else
				local u51 = g_select_2;
				u45 = function(...) -- [line 3] anonymous function
					--[[
						Upvalues: 
							[1] = u51
					--]]
					return u51("#", ...), {...};
				end;
				v107 = 0;
			end
		end
	end
	local v130 = {};
	v130[1] = u46;
	local v131 = 1;
	local u52 = nil;
	local v132 = nil;
	local u53 = nil;
	local u54 = nil;
	local v133 = nil;
	while true do
		if (v131 <= 2) then
			if (v131 <= 0) then
				u53 = v132;
				v131 = 5;
			else
				if (v131 == 1) then
					u52 = 1;
					v131 = 3;
				else
					break;
				end
			end
		else
			if (v131 <= 4) then
				if (v131 == 3) then
					local u55 = g_error_11;
					local u56 = p38;
					v132 = function() -- [line 3] anonymous function
						--[[
							Upvalues: 
								[1] = u55
								[2] = u56
						--]]
						u55(u56);
					end;
					v131 = 0;
				else
					v133 = function(...) -- [line 3] anonymous function
						return (...)();
					end;
					v131 = 6;
				end
			else
				if (v131 == 5) then
					u54 = v132;
					v131 = 4;
				else
					v131 = 2;
				end
			end
		end
	end
	local u57 = v132;
	local v134 = 0;
	local v135 = nil;
	local u58 = nil;
	local u59 = nil;
	while true do
		if (v134 <= 0) then
			v135 = function(...) -- [line 3] anonymous function
				return (...)[...];
			end;
			v134 = 1;
		else
			if (v134 == 1) then
				u58 = function() -- [line 3] anonymous function
					--[[
						Upvalues: 
							[1] = u4
							[2] = u15
							[3] = u34
					--]]
					local v136 = 0;
					local v137 = nil;
					while true do
						if (v136 <= 0) then
							v137 = u34();
							v136 = 1;
						else
							if (v136 == 1) then
								local v138 = u4;
								if (v138 <= v137) then
									return v137 - u15;
								end
								v136 = 2;
							else
								return v137;
							end
						end
					end
				end;
				v134 = 2;
			else
				local u60 = g_setmetatable_6;
				local u61 = g_getfenv_9;
				local u62 = g_setfenv_12;
				local u63 = g_pcall_3;
				local u64 = p7;
				local u65 = v63;
				local u66 = p27;
				local u67 = p41;
				local u68 = g_next_4;
				local u69 = v130;
				local u70 = v66;
				local u71 = v4;
				local u72 = g_error_11;
				local u73 = g_tostring_1;
				u59 = function(p66, p67, p68) -- [line 3] Vt
					--[[
						Upvalues: 
							[1] = u60
							[2] = u61
							[3] = u12
							[4] = u45
							[5] = u17
							[6] = u62
							[7] = u63
							[8] = u35
							[9] = u64
							[10] = u65
							[11] = u66
							[12] = u67
							[13] = u68
							[14] = u59
							[15] = u26
							[16] = u22
							[17] = u69
							[18] = u25
							[19] = u23
							[20] = u70
							[21] = u71
							[22] = u72
							[23] = u3
							[24] = u73
					--]]
					local v139 = p66[8];
					local v140 = p66[7];
					local v141 = p66[9];
					local v142 = p66[1];
					local v143 = p66[5];
					local v144 = p66[4];
					local v145 = p66[2];
					local v146 = p66[6];
					local v147 = u60;
					local v148 = {};
					local v149 = {};
					v149.__mode = "v";
					local v150 = v147(v148, v149);
					local u74 = p67;
					local u75 = p66;
					local u76 = v143;
					local u77 = v144;
					local u78 = v140;
					local u79 = v145;
					local u80 = p68;
					local u81 = v146;
					local u82 = v150;
					local u83 = v142;
					local u84;
					u84 = function(...) -- [line 3] anonymous function
						--[[
							Upvalues: 
								[1] = u61
								[2] = u12
								[3] = u74
								[4] = u75
								[5] = u45
								[6] = u76
								[7] = u77
								[8] = u78
								[9] = u17
								[10] = u62
								[11] = u84
								[12] = u63
								[13] = u79
								[14] = u80
								[15] = u35
								[16] = u64
								[17] = u65
								[18] = u81
								[19] = u66
								[20] = u82
								[21] = u67
								[22] = u68
								[23] = u59
								[24] = u26
								[25] = u22
								[26] = u69
								[27] = u25
								[28] = u23
								[29] = u70
								[30] = u71
								[31] = u72
								[32] = u3
								[33] = u83
								[34] = u73
						--]]
						local v151 = false;
						local u85 = 1;
						local v152 = {};
						local u86 = 0;
						local v153;
						if (u61) then
							v153 = u61();
							if (not v153) then
								v151 = true;
							end
						else
							v151 = true;
						end
						if (v151) then
							v153 = _ENV;
						end
						local v154 = false;
						local v155;
						if (v153 == u12) then
							v155 = u74;
							if (not v155) then
								v154 = true;
							end
						else
							v154 = true;
						end
						if (v154) then
							v155 = v153;
						end
						local v156 = {};
						v156[2] = u75;
						v156[1] = v152;
						local v157, v158 = u45(...);
						local u87 = v158;
						local u88 = v157 - 1;
						local v159 = 0;
						local v160 = u88;
						local v161 = v160;
						local v162 = v159;
						if (not (v160 <= v162)) then
							while (v159 < u76) do
								v152[v159] = u87[v159 + 1];
								local v163 = v159 + 1;
								v159 = v163;
								local v164 = v161;
								if (v164 < v163) then
									break;
								end
							end
						end
						if (u77) then
							if (u78) then
								local v165 = false;
								local v166 = u76;
								local v167 = {};
								local v168 = u76;
								local v169;
								if (v168 <= u88) then
									v169 = (u88 - u76) + 1;
									if (not v169) then
										v165 = true;
									end
								else
									v165 = true;
								end
								if (v165) then
									v169 = 0;
								end
								v167.n = v169;
								__builtin_settop(v167, 1, u17(u87, u76 + 1, u88 + 1));
								v152[v166] = v167;
							end
						else
							u87 = nil;
						end
						if (v155 ~= v153) then
							if (u62) then
								u62(u84, v155);
							else
								_ENV = v155;
							end
						end
						local v170 = u63;
						local u89 = v152;
						local u90 = v156;
						local u91 = v155;
						local v627, v628, v629, v630 = v170(function() -- [line 3] anonymous function
							--[[
								Upvalues: 
									[1] = u79
									[2] = u85
									[3] = u89
									[4] = u90
									[5] = u86
									[6] = u80
									[7] = u17
									[8] = u88
									[9] = u76
									[10] = u87
									[11] = u91
									[12] = u45
									[13] = u35
									[14] = u64
									[15] = u65
									[16] = u81
									[17] = u66
									[18] = u82
									[19] = u67
									[20] = u68
									[21] = u59
									[22] = u26
									[23] = u22
									[24] = u69
									[25] = u25
									[26] = u23
									[27] = u70
							--]]
							while true do
								local v171 = u79[u85];
								local v172 = v171;
								local v173 = v171[7];
								u85 = u85 + 1;
								if (v173 < 57) then
									if (v173 < 28) then
										if (v173 >= 14) then
											if (v173 < 21) then
												if (v173 >= 17) then
													if (v173 < 19) then
														if (v173 == 18) then
															u89[v172[6]] = u23(u89[v172[1]], u89[v172[3]]);
														else
															u89[v172[6]] = u89[v172[1]] / u89[v172[3]];
														end
													else
														if (v173 == 20) then
															local v174 = v172[3];
															if (v174 == 254) then
																u85 = u85 - 1;
																local v175 = u79;
																local v176 = u85;
																local v177 = {};
																v177[6] = v172[6] - 59;
																v177[7] = 78;
																v177[1] = v172[1] - 59;
																v175[v176] = v177;
															else
																local v178 = v172[3];
																if (v178 == 56) then
																	u85 = u85 - 1;
																	local v179 = u79;
																	local v180 = u85;
																	local v181 = {};
																	v181[6] = v172[6] - 171;
																	v181[7] = 78;
																	v181[1] = v172[1] - 171;
																	v179[v180] = v181;
																else
																	local v182 = v172[3];
																	if (v182 == 42) then
																		u85 = u85 - 1;
																		local v183 = u79;
																		local v184 = u85;
																		local v185 = {};
																		v185[6] = v172[6] - 66;
																		v185[1] = v172[1] - 66;
																		v185[7] = 67;
																		v183[v184] = v185;
																	else
																		local v186 = v172[3];
																		if (v186 == 47) then
																			u85 = u85 - 1;
																			local v187 = u79;
																			local v188 = u85;
																			local v189 = {};
																			v189[1] = v172[1] - 87;
																			v189[6] = v172[6] - 87;
																			v189[7] = 49;
																			v187[v188] = v189;
																		else
																			local v190 = u82;
																			local v191 = u89;
																			local v192 = {};
																			local v193 = u68;
																			local v194 = v190;
																			local v195 = nil;
																			while true do
																				local v196, v197 = v193(v194, v195);
																				local v198 = v196;
																				local v199 = v197;
																				if (v196) then
																					break;
																				end
																				v195 = v198;
																				local v200 = u68;
																				local v201 = v199;
																				local v202 = nil;
																				while true do
																					local v203, v204 = v200(v201, v202);
																					local v205 = v203;
																					local v206 = v204;
																					if (v203) then
																						break;
																					end
																					v202 = v205;
																					local v207 = v206[1];
																					if ((v207 == v191) and (v206[2] >= 0)) then
																						local v208 = v206[2];
																						local v209 = v208;
																						if (not v192[v208]) then
																							v192[v209] = {
																								v191[v209]
																							};
																						end
																						v206[1] = v192[v209];
																						v206[2] = 1;
																					end
																				end
																			end
																			return false, v172[6], u86;
																		end
																	end
																end
															end
														else
															local v210 = u89[v172[1]];
															if (not (v210 <= u89[v172[3]])) then
																u85 = v172[6];
															end
														end
													end
												else
													if (v173 >= 15) then
														if (v173 == 16) then
															local v211 = v172[6];
															u89[v211](u89[v211 + 1]);
															u86 = v211 - 1;
														else
															local v212 = v172[3];
															if (v212 == 117) then
																u85 = u85 - 1;
																local v213 = u79;
																local v214 = u85;
																local v215 = {};
																v215[7] = 67;
																v215[1] = v172[1] - 123;
																v215[6] = v172[6] - 123;
																v213[v214] = v215;
															else
																local v216 = v172[3];
																if (v216 == 110) then
																	u85 = u85 - 1;
																	local v217 = u79;
																	local v218 = u85;
																	local v219 = {};
																	v219[1] = v172[1] - 80;
																	v219[6] = v172[6] - 80;
																	v219[7] = 20;
																	v217[v218] = v219;
																else
																	local v220 = u82;
																	local v221 = u89;
																	local v222 = v172[6];
																	local v223 = {};
																	local v224 = u68;
																	local v225 = v220;
																	local v226 = nil;
																	while true do
																		local v227, v228 = v224(v225, v226);
																		local v229 = v227;
																		local v230 = v228;
																		if (v227) then
																			break;
																		end
																		v226 = v229;
																		local v231 = u68;
																		local v232 = v230;
																		local v233 = nil;
																		while true do
																			local v234, v235 = v231(v232, v233);
																			local v236 = v234;
																			local v237 = v235;
																			if (v234) then
																				break;
																			end
																			v233 = v236;
																			local v238 = v237[1];
																			if ((v238 == v221) and (v222 <= v237[2])) then
																				local v239 = v237[2];
																				local v240 = v239;
																				if (not v223[v239]) then
																					v223[v240] = {
																						v221[v240]
																					};
																				end
																				v237[1] = v223[v240];
																				v237[2] = 1;
																			end
																		end
																	end
																end
															end
														end
													else
														local v241 = v172[6];
														u86 = (v241 + v172[1]) - 1;
														u89[v241] = u89[v241](u17(u89, v241 + 1, u86));
														u86 = v241;
													end
												end
											else
												if (v173 < 24) then
													if (v173 < 22) then
														u89[v172[6]] = v172[5] == u89[v172[3]];
													else
														if (v173 == 23) then
															local v242 = u89[v172[1]] / u89[v172[3]];
															u89[v172[6]] = v242 - (v242 % 1);
														else
															local v243 = v172[3];
															if (v243 == 182) then
																u85 = u85 - 1;
																local v244 = u79;
																local v245 = u85;
																local v246 = {};
																v246[1] = v172[1] - 237;
																v246[6] = v172[6] - 237;
																v246[7] = 49;
																v244[v245] = v246;
															else
																local v247 = v172[6];
																local v248 = v247;
																local v249 = v247;
																local v250 = v247 + (v172[1] - 1);
																local v251 = v250;
																local v252 = v249;
																if (not (v250 <= v252)) then
																	while true do
																		u89[v249] = u87[(u76 + (v249 - v248)) + 1];
																		local v253 = v249 + 1;
																		v249 = v253;
																		local v254 = v251;
																		if (v254 < v253) then
																			break;
																		end
																	end
																end
															end
														end
													end
												else
													if (v173 >= 26) then
														if (v173 == 27) then
															u89[v172[6]] = u70(u89[v172[1]]);
														else
															local v255 = u89[v172[1]];
															if (v255 <= u89[v172[3]]) then
																u85 = v172[6];
															end
														end
													else
														if (v173 == 25) then
															u89[v172[6]] = u69[v172[1]];
														else
															u89[v172[6]] = v172[5] ~= u89[v172[3]];
														end
													end
												end
											end
										else
											if (v173 < 7) then
												if (v173 >= 3) then
													if (v173 >= 5) then
														if (v173 == 6) then
															local v256 = v172[6];
															u89[v256] = u89[v256](u89[v256 + 1], u89[v256 + 2]);
															u86 = v256;
														else
															local v257 = v172[6];
															local v258 = v257;
															local v259 = v172[1];
															local v260 = v259;
															u86 = (v257 + v259) - 1;
															local v261 = {};
															local v262 = u82;
															local v263 = u89;
															local v264 = u68;
															local v265 = v262;
															local v266 = nil;
															while true do
																local v267, v268 = v264(v265, v266);
																local v269 = v267;
																local v270 = v268;
																if (v267) then
																	break;
																end
																v266 = v269;
																local v271 = u68;
																local v272 = v270;
																local v273 = nil;
																while true do
																	local v274, v275 = v271(v272, v273);
																	local v276 = v274;
																	local v277 = v275;
																	if (v274) then
																		break;
																	end
																	v273 = v276;
																	local v278 = v277[1];
																	if ((v278 == v263) and (v277[2] >= 0)) then
																		local v279 = v277[2];
																		local v280 = v279;
																		if (not v261[v279]) then
																			v261[v280] = {
																				v263[v280]
																			};
																		end
																		v277[1] = v261[v280];
																		v277[2] = 1;
																	end
																end
															end
															return true, v258, v260;
														end
													else
														if (v173 == 4) then
															local v281 = u89[v172[1]];
															if (not (v281 < u89[v172[3]])) then
																u85 = v172[6];
															end
														else
															u89[v172[6]][v172[5]] = u89[v172[3]];
														end
													end
												else
													if (v173 < 1) then
														u89[v172[6]] = u89[v172[1]][u89[v172[3]]];
													else
														if (v173 == 2) then
															if (u89[v172[6]]) then
																u85 = v172[1];
															end
														else
															local v282 = v172[3];
															if (v282 == 199) then
																u85 = u85 - 1;
																local v283 = u79;
																local v284 = u85;
																local v285 = {};
																v285[6] = v172[6] - 230;
																v285[1] = v172[1] - 230;
																v285[7] = 9;
																v283[v284] = v285;
															else
																u89[v172[6]] = -u89[v172[1]];
															end
														end
													end
												end
											else
												if (v173 >= 10) then
													if (v173 < 12) then
														if (v173 == 11) then
															u89[v172[6]] = {};
														else
															u89[v172[6]][v172[5]] = v172[4];
														end
													else
														if (v173 == 13) then
															u89[v172[6]] = u25(u89[v172[1]], u89[v172[3]]);
														else
															u89[v172[6]] = u89[v172[1]] + u89[v172[3]];
														end
													end
												else
													if (v173 < 8) then
														u89[v172[6]][u89[v172[1]]] = u89[v172[3]];
													else
														if (v173 == 9) then
															local v286 = v172[3];
															if (v286 == 91) then
																u85 = u85 - 1;
																local v287 = u79;
																local v288 = u85;
																local v289 = {};
																v289[7] = 104;
																v289[6] = v172[6] - 26;
																v289[1] = v172[1] - 26;
																v287[v288] = v289;
															else
																local v290 = v172[3];
																if (v290 == 40) then
																	u85 = u85 - 1;
																	local v291 = u79;
																	local v292 = u85;
																	local v293 = {};
																	v293[1] = v172[1] - 180;
																	v293[7] = 20;
																	v293[6] = v172[6] - 180;
																	v291[v292] = v293;
																else
																	u89[v172[6]] = u89[v172[1]];
																end
															end
														else
															u89[v172[6]] = u89[v172[3]] < v172[5];
														end
													end
												end
											end
										end
									else
										if (v173 >= 42) then
											if (v173 < 49) then
												if (v173 < 45) then
													if (v173 >= 43) then
														if (v173 == 44) then
															u89[v172[6]] = v172[5] * u89[v172[3]];
														else
															local v294 = v172[6];
															u89[v294] = u89[v294](u17(u89, v294 + 1, u86));
															u86 = v294;
														end
													else
														u89[v172[6]] = v172[4] <= u89[v172[1]];
													end
												else
													if (v173 >= 47) then
														if (v173 == 48) then
															u89[v172[6]] = u89[v172[1]] / v172[4];
														else
															u69[v172[1]] = u89[v172[6]];
														end
													else
														if (v173 == 46) then
															u89[v172[6]] = u22(u89[v172[1]], u89[v172[3]]);
														else
															u89[v172[6]] = v172[5] + v172[4];
														end
													end
												end
											else
												if (v173 >= 53) then
													if (v173 >= 55) then
														if (v173 == 56) then
															u89[v172[6]] = u89[v172[1]] ~= v172[4];
														else
															u89[v172[6]] = {u17({}, 1, v172[1])};
														end
													else
														if (v173 == 54) then
															local v295 = v172[6];
															local v296 = v295;
															local v297, v298 = u89[v295]();
															local v299 = v298;
															if (v297) then
																local v300 = 1;
																local v301 = v172[3];
																local v302 = v301;
																local v303 = v300;
																if (not (v301 <= v303)) then
																	while true do
																		u89[v296 + v300] = v299[v300];
																		local v304 = v300 + 1;
																		v300 = v304;
																		local v305 = v302;
																		if (v305 < v304) then
																			break;
																		end
																	end
																end
																u85 = v172[1];
															end
														else
															local v306 = u89[v172[1]];
															if (v306 == u89[v172[3]]) then
																u85 = v172[6];
															end
														end
													end
												else
													if (v173 < 51) then
														if (v173 == 50) then
															local v307 = u82;
															local v308 = u89;
															local v309 = {};
															local v310 = u68;
															local v311 = v307;
															local v312 = nil;
															while true do
																local v313, v314 = v310(v311, v312);
																local v315 = v313;
																local v316 = v314;
																if (v313) then
																	break;
																end
																v312 = v315;
																local v317 = u68;
																local v318 = v316;
																local v319 = nil;
																while true do
																	local v320, v321 = v317(v318, v319);
																	local v322 = v320;
																	local v323 = v321;
																	if (v320) then
																		break;
																	end
																	v319 = v322;
																	local v324 = v323[1];
																	if ((v324 == v308) and (v323[2] >= 0)) then
																		local v325 = v323[2];
																		local v326 = v325;
																		if (not v309[v325]) then
																			v309[v326] = {
																				v308[v326]
																			};
																		end
																		v323[1] = v309[v326];
																		v323[2] = 1;
																	end
																end
															end
															local v327 = v172[6];
															return false, v327, v327;
														end
														local v328 = v172[3];
														if (v328 == 242) then
															u85 = u85 - 1;
															local v329 = u79;
															local v330 = u85;
															local v331 = {};
															v331[6] = v172[6] - 122;
															v331[1] = v172[1] - 122;
															v331[7] = 104;
															v329[v330] = v331;
														else
															local v332 = u82;
															local v333 = u89;
															local v334 = {};
															local v335 = u68;
															local v336 = v332;
															local v337 = nil;
															while true do
																local v338, v339 = v335(v336, v337);
																local v340 = v338;
																local v341 = v339;
																if (v338) then
																	break;
																end
																v337 = v340;
																local v342 = u68;
																local v343 = v341;
																local v344 = nil;
																while true do
																	local v345, v346 = v342(v343, v344);
																	local v347 = v345;
																	local v348 = v346;
																	if (v345) then
																		break;
																	end
																	v344 = v347;
																	local v349 = v348[1];
																	if ((v349 == v333) and (v348[2] >= 0)) then
																		local v350 = v348[2];
																		local v351 = v350;
																		if (not v334[v350]) then
																			v334[v351] = {
																				v333[v351]
																			};
																		end
																		v348[1] = v334[v351];
																		v348[2] = 1;
																	end
																end
															end
															local v352 = v172[6];
															return false, v352, (v352 + v172[1]) - 2;
														end
													else
														if (v173 == 52) then
															u89[v172[6]] = u89[v172[1]] + v172[4];
														else
															local v353 = u89[v172[1]];
															if (v353 == v172[4]) then
																u85 = v172[6];
															end
														end
													end
												end
											end
										else
											if (v173 >= 35) then
												if (v173 >= 38) then
													if (v173 < 40) then
														if (v173 == 39) then
															u89[v172[6]] = v172[4] < u89[v172[1]];
														else
															local v354 = u89[v172[1]];
															if (v354 ~= v172[4]) then
																u85 = v172[6];
															end
														end
													else
														if (v173 == 41) then
															local v355 = u80[v172[1]];
															v355[1][v355[2]] = u89[v172[6]];
														else
															local v356 = v172[5];
															if (not (v356 < u89[v172[3]])) then
																u85 = v172[6];
															end
														end
													end
												else
													if (v173 < 36) then
														u89[v172[6]] = u89[v172[1]] < v172[4];
													else
														if (v173 == 37) then
															local v357 = v172[6];
															u89[v357](u89[v357 + 1], u89[v357 + 2]);
															u86 = v357 - 1;
														else
															u89[v172[6]] = u89[v172[1]] * u89[v172[3]];
														end
													end
												end
											else
												if (v173 < 31) then
													if (v173 < 29) then
														u89[v172[6]][u89[v172[1]]] = v172[4];
													else
														if (v173 == 30) then
															local v358 = v172[1];
															u89[v172[6]] = u89[v358] .. u89[v358 + 1];
														else
															u89[v172[6]] = v172[5] <= u89[v172[3]];
														end
													end
												else
													if (v173 >= 33) then
														if (v173 == 34) then
															local v359 = v172[3];
															if (v359 == 233) then
																u85 = u85 - 1;
																local v360 = u79;
																local v361 = u85;
																local v362 = {};
																v362[7] = 20;
																v362[1] = v172[1] - 17;
																v362[6] = v172[6] - 17;
																v360[v361] = v362;
															else
																u89[v172[6]] = not u89[v172[1]];
															end
														else
															u89[v172[6]] = u87[u76 + 1];
														end
													else
														if (v173 == 32) then
															u89[v172[6]] = u26(u89[v172[1]], u89[v172[3]]);
														else
															local v363 = v172[3];
															if (v363 == 157) then
																u85 = u85 - 1;
																local v364 = u79;
																local v365 = u85;
																local v366 = {};
																v366[7] = 104;
																v366[1] = v172[1] - 146;
																v366[6] = v172[6] - 146;
																v364[v365] = v366;
															else
																local v367 = v172[3];
																if (v367 == 68) then
																	u85 = u85 - 1;
																	local v368 = u79;
																	local v369 = u85;
																	local v370 = {};
																	v370[7] = 9;
																	v370[1] = v172[1] - 163;
																	v370[6] = v172[6] - 163;
																	v368[v369] = v370;
																else
																	u89[v172[6]] = nil;
																end
															end
														end
													end
												end
											end
										end
									end
								else
									if (v173 >= 85) then
										if (v173 >= 99) then
											if (v173 < 106) then
												if (v173 >= 102) then
													if (v173 < 104) then
														if (v173 == 103) then
															local v371 = v172[6];
															u86 = (v371 + v172[1]) - 1;
															u89[v371](u17(u89, v371 + 1, u86));
															u86 = v371 - 1;
														else
															local v372 = v172[6];
															local v373 = u35(function(...) -- [line 3] anonymous function
																--[[
																	Upvalues: 
																		[1] = u64
																--]]
																u64();
																local v374, v375, v376 = ...;
																local v377 = v374;
																local v378 = v375;
																local v379 = v376;
																while true do
																	local v380 = v377(v378, v379);
																	local v381 = v380;
																	if (v380) then
																		break;
																	end
																	v379 = v381;
																	u64(true, v381);
																end
															end);
															v373(u89[v372], u89[v372 + 1], u89[v372 + 2]);
															u86 = v372;
															u89[v372] = v373;
															u85 = v172[1];
														end
													else
														if (v173 == 105) then
															local v382 = u81[v172[1]];
															local v383 = v382;
															local v384 = v382[3];
															local v385 = v384;
															local v386 = nil;
															local v387 = #v384;
															local v388 = v387;
															if (v387 > 0) then
																v386 = {};
																local v389 = 1;
																local v390 = v388;
																local v391 = v390;
																local v392 = v389;
																if (not (v390 <= v392)) then
																	while true do
																		local v393 = v385[v389];
																		local v394 = v393;
																		local v395 = v393[1];
																		if (v395 == 0) then
																			v386[v389 - 1] = {
																				u89,
																				v394[2]
																			};
																		else
																			v386[v389 - 1] = u80[v394[2]];
																		end
																		local v396 = v389 + 1;
																		v389 = v396;
																		local v397 = v391;
																		if (v397 < v396) then
																			break;
																		end
																	end
																end
																u66(u82, v386);
															end
															u89[v172[6]] = u59(v383, u91, v386);
														else
															local v398 = v172[3];
															if (v398 == 145) then
																u85 = u85 - 1;
																local v399 = u79;
																local v400 = u85;
																local v401 = {};
																v401[1] = v172[1] - 134;
																v401[6] = v172[6] - 134;
																v401[7] = 49;
																v399[v400] = v401;
															else
																local v402 = v172[3];
																if (v402 == 76) then
																	u85 = u85 - 1;
																	local v403 = u79;
																	local v404 = u85;
																	local v405 = {};
																	v405[1] = v172[1] - 109;
																	v405[6] = v172[6] - 109;
																	v405[7] = 50;
																	v403[v404] = v405;
																else
																	local v406 = u82;
																	local v407 = u89;
																	local v408 = {};
																	local v409 = u68;
																	local v410 = v406;
																	local v411 = nil;
																	while true do
																		local v412, v413 = v409(v410, v411);
																		local v414 = v412;
																		local v415 = v413;
																		if (v412) then
																			break;
																		end
																		v411 = v414;
																		local v416 = u68;
																		local v417 = v415;
																		local v418 = nil;
																		while true do
																			local v419, v420 = v416(v417, v418);
																			local v421 = v419;
																			local v422 = v420;
																			if (v419) then
																				break;
																			end
																			v418 = v421;
																			local v423 = v422[1];
																			if ((v423 == v407) and (v422[2] >= 0)) then
																				local v424 = v422[2];
																				local v425 = v424;
																				if (not v408[v424]) then
																					v408[v425] = {
																						v407[v425]
																					};
																				end
																				v422[1] = v408[v425];
																				v422[2] = 1;
																			end
																		end
																	end
																	return;
																end
															end
														end
													end
												else
													if (v173 >= 100) then
														if (v173 == 101) then
															u89[v172[6]] = u89[v172[1]][v172[4]];
														else
															local v426 = v172[6];
															local v427 = v426;
															local v428 = u89[v426];
															local v429 = (v172[3] - 1) * 50;
															local v430 = 1;
															local v431 = v172[1];
															local v432 = v431;
															local v433 = v430;
															if (not (v431 <= v433)) then
																while true do
																	v428[v429 + v430] = u89[v427 + v430];
																	local v434 = v430 + 1;
																	v430 = v434;
																	local v435 = v432;
																	if (v435 < v434) then
																		break;
																	end
																end
															end
														end
													else
														local v436 = u82;
														local v437 = u89;
														local v438 = {};
														local v439 = u68;
														local v440 = v436;
														local v441 = nil;
														while true do
															local v442, v443 = v439(v440, v441);
															local v444 = v442;
															local v445 = v443;
															if (v442) then
																break;
															end
															v441 = v444;
															local v446 = u68;
															local v447 = v445;
															local v448 = nil;
															while true do
																local v449, v450 = v446(v447, v448);
																local v451 = v449;
																local v452 = v450;
																if (v449) then
																	break;
																end
																v448 = v451;
																local v453 = v452[1];
																if ((v453 == v437) and (v452[2] >= 0)) then
																	local v454 = v452[2];
																	local v455 = v454;
																	if (not v438[v454]) then
																		v438[v455] = {
																			v437[v455]
																		};
																	end
																	v452[1] = v438[v455];
																	v452[2] = 1;
																end
															end
														end
														return true, v172[6], 1;
													end
												end
											else
												if (v173 < 110) then
													if (v173 >= 108) then
														if (v173 == 109) then
															u89[v172[6]] = u89[v172[1]] * v172[4];
														else
															local v456 = v172[3];
															if (v456 == 151) then
																u85 = u85 - 1;
																local v457 = u79;
																local v458 = u85;
																local v459 = {};
																v459[7] = 1;
																v459[1] = v172[1] - 239;
																v459[6] = v172[6] - 239;
																v457[v458] = v459;
															else
																local v460 = v172[6];
																local v461 = v172[1];
																local v462 = v461;
																local v463 = v460;
																if (not (v461 <= v463)) then
																	while true do
																		u89[v460] = nil;
																		local v464 = v460 + 1;
																		v460 = v464;
																		local v465 = v462;
																		if (v465 < v464) then
																			break;
																		end
																	end
																end
															end
														end
													else
														if (v173 == 107) then
															local v466 = v172[1];
															local v467 = u89[v466];
															local v468 = v466 + 1;
															local v469 = v172[3];
															local v470 = v469;
															local v471 = v468;
															if (not (v469 <= v471)) then
																while true do
																	v467 = v467 .. u89[v468];
																	local v472 = v468 + 1;
																	v468 = v472;
																	local v473 = v470;
																	if (v473 < v472) then
																		break;
																	end
																end
															end
															u89[v172[6]] = v467;
														else
															local v474 = v172[6];
															local v475 = u35(function(...) -- [line 3] anonymous function
																--[[
																	Upvalues: 
																		[1] = u64
																--]]
																u64();
																local v476, v477, v478 = ...;
																local v479 = v476;
																local v480 = v477;
																local v481 = v478;
																while true do
																	local v482, v483 = v479(v480, v481);
																	local v484 = v482;
																	local v485 = v483;
																	if (v482) then
																		break;
																	end
																	v481 = v484;
																	u64(true, v484, v485);
																end
															end);
															v475(u89[v474], u89[v474 + 1], u89[v474 + 2]);
															u86 = v474;
															u89[v474] = v475;
															u85 = v172[1];
														end
													end
												else
													if (v173 >= 112) then
														if (v173 == 113) then
															u89[v172[6]] = u89[v172[1]] == u89[v172[3]];
														else
															u89[v172[6]] = u90[v172[1]];
														end
													else
														if (v173 == 111) then
															local v486 = u82;
															local v487 = u89;
															local v488 = {};
															local v489 = u68;
															local v490 = v486;
															local v491 = nil;
															while true do
																local v492, v493 = v489(v490, v491);
																local v494 = v492;
																local v495 = v493;
																if (v492) then
																	break;
																end
																v491 = v494;
																local v496 = u68;
																local v497 = v495;
																local v498 = nil;
																while true do
																	local v499, v500 = v496(v497, v498);
																	local v501 = v499;
																	local v502 = v500;
																	if (v499) then
																		break;
																	end
																	v498 = v501;
																	local v503 = v502[1];
																	if ((v503 == v487) and (v502[2] >= 0)) then
																		local v504 = v502[2];
																		local v505 = v504;
																		if (not v488[v504]) then
																			v488[v505] = {
																				v487[v505]
																			};
																		end
																		v502[1] = v488[v505];
																		v502[2] = 1;
																	end
																end
															end
															return true, v172[6], 0;
														end
														if (not u89[v172[6]]) then
															u85 = v172[1];
														end
													end
												end
											end
										else
											if (v173 >= 92) then
												if (v173 < 95) then
													if (v173 < 93) then
														local v506 = v172[6];
														local v507 = u89[v506];
														local v508 = u89[v506 + 1];
														local v509 = u89[v506 + 2];
														local v510 = u89;
														local v511 = u35;
														local u92 = v507;
														local u93 = v508;
														local u94 = v509;
														v510[v506] = v511(function() -- [line 3] anonymous function
															--[[
																Upvalues: 
																	[1] = u92
																	[2] = u93
																	[3] = u94
																	[4] = u64
															--]]
															local v512 = u92;
															local v513 = u93;
															local v514 = v513;
															local v515 = u94;
															local v516 = v512;
															local v517;
															if (v515 > 0) then
																v517 = v513 <= v516;
															else
																v517 = v516 <= v513;
															end
															if (not v517) then
																while true do
																	u64(true, v512);
																	local v518 = v512 + v515;
																	v512 = v518;
																	local v519 = v514;
																	local v520;
																	if (v515 > 0) then
																		v520 = v519 < v518;
																	else
																		v520 = v518 < v519;
																	end
																	if (v520) then
																		break;
																	end
																end
															end
														end);
														u85 = v172[1];
													else
														if (v173 == 94) then
															local v521 = v172[6];
															local v522 = u89[v172[1]];
															u89[v521 + 1] = v522;
															u89[v521] = v522[v172[4]];
														else
															local v523 = nil;
															local v524 = u81[v172[1]][3];
															local v525 = v524;
															local v526 = #v524;
															local v527 = v526;
															if (v526 > 0) then
																v523 = {};
																local v528 = 1;
																local v529 = v527;
																local v530 = v529;
																local v531 = v528;
																if (not (v529 <= v531)) then
																	while true do
																		local v532 = v525[v528];
																		local v533 = v532;
																		local v534 = v532[1];
																		if (v534 == 0) then
																			v523[v528 - 1] = {
																				u89,
																				v533[2]
																			};
																		else
																			v523[v528 - 1] = u80[v533[2]];
																		end
																		local v535 = v528 + 1;
																		v528 = v535;
																		local v536 = v530;
																		if (v536 < v535) then
																			break;
																		end
																	end
																end
																u66(u82, v523);
															end
															u89[v172[6]] = u67[v172[3]](v523);
														end
													end
												else
													if (v173 >= 97) then
														if (v173 == 98) then
															u89[v172[6]] = u65(u89[v172[1]], u89[v172[3]]);
														else
															u89[v172[6]] = u91[v172[5]];
														end
													else
														if (v173 == 96) then
															u85 = v172[1];
														else
															u89[v172[6]] = u89[v172[1]] == v172[4];
														end
													end
												end
											else
												if (v173 < 88) then
													if (v173 >= 86) then
														if (v173 == 87) then
															local v537 = v172[6];
															local v538 = u35(function(...) -- [line 3] anonymous function
																--[[
																	Upvalues: 
																		[1] = u64
																--]]
																u64();
																local v539, v540, v541 = ...;
																local v542 = v539;
																local v543 = v540;
																local v544 = v541;
																while true do
																	local v545, v546, v547, v548, v549, v550, v551, v552, v553, v554 = v542(v543, v544);
																	local v555 = v545;
																	local v556 = v546;
																	local v557 = v547;
																	local v558 = v548;
																	local v559 = v549;
																	local v560 = v550;
																	local v561 = v551;
																	local v562 = v552;
																	local v563 = v553;
																	local v564 = v554;
																	if (v545) then
																		break;
																	end
																	v544 = v555;
																	u64(true, {
																		v555,
																		v556,
																		v557,
																		v558,
																		v559,
																		v560,
																		v561,
																		v562,
																		v563,
																		v564
																	});
																end
															end);
															v538(u89[v537], u89[v537 + 1], u89[v537 + 2]);
															u86 = v537;
															u89[v537] = v538;
															u85 = v172[1];
														else
															u89[v172[6]] = u89[v172[1]] ^ u89[v172[3]];
														end
													else
														u89[v172[6]] = u89[v172[1]] <= u89[v172[3]];
													end
												else
													if (v173 < 90) then
														if (v173 == 89) then
															u89[v172[6]] = u89[v172[3]] <= u89[v172[1]];
														else
															u89[v172[6]] = v172[5] - u89[v172[3]];
														end
													else
														if (v173 == 91) then
															local v565 = v172[1];
															local v566 = v172[6];
															if (v565 ~= 0) then
																u86 = (v566 + v565) - 1;
															end
															local v567 = v172[3];
															local v570, v571;
															if (v565 == 1) then
																local v568, v569 = u45(u89[v566]());
																v570 = v568;
																v571 = v569;
															else
																local v572, v573 = u45(u89[v566](u17(u89, v566 + 1, u86)));
																v570 = v572;
																v571 = v573;
															end
															if (v567 == 1) then
																u86 = v566 - 1;
															else
																local v574;
																if (v567 == 0) then
																	v574 = (v570 + v566) - 1;
																	u86 = v574;
																else
																	v574 = (v566 + v567) - 2;
																	u86 = v574 + 1;
																end
																local v575 = 0;
																local v576 = v566;
																local v577 = v574;
																local v578 = v577;
																local v579 = v576;
																if (not (v577 <= v579)) then
																	while true do
																		v575 = v575 + 1;
																		u89[v576] = v571[v575];
																		local v580 = v576 + 1;
																		v576 = v580;
																		local v581 = v578;
																		if (v581 < v580) then
																			break;
																		end
																	end
																end
															end
														else
															local v582 = v172[6];
															local v583 = v582;
															local v584, v585 = u89[v582]();
															local v586 = v585;
															if (v584) then
																u85 = v172[1];
																u89[v583 + 3] = v586;
															end
														end
													end
												end
											end
										end
									else
										if (v173 < 71) then
											if (v173 >= 64) then
												if (v173 >= 67) then
													if (v173 < 69) then
														if (v173 == 68) then
															u89[v172[6]] = v172[5];
														else
															local v587 = v172[3];
															if (v587 == 57) then
																u85 = u85 - 1;
																local v588 = u79;
																local v589 = u85;
																local v590 = {};
																v590[1] = v172[1] - 209;
																v590[7] = 78;
																v590[6] = v172[6] - 209;
																v588[v589] = v590;
															else
																u89[v172[6]] = #u89[v172[1]];
															end
														end
													else
														if (v173 == 70) then
															local v591 = u89[v172[1]];
															if (v591 < u89[v172[3]]) then
																u85 = v172[6];
															end
														else
															u89[v172[6]] = true;
														end
													end
												else
													if (v173 >= 65) then
														if (v173 == 66) then
															u89[v172[6]] = u89[v172[1]] < u89[v172[3]];
														else
															u89[v172[6]] = u89[v172[1]] % v172[4];
														end
													else
														u90[v172[1]] = u89[v172[6]];
													end
												end
											else
												if (v173 >= 60) then
													if (v173 >= 62) then
														if (v173 == 63) then
															local v592 = u80[v172[1]];
															u89[v172[6]] = v592[1][v592[2]];
														else
															local v593 = v172[6];
															local v594 = v593;
															local v595, v596 = u89[v593]();
															local v597 = v596;
															if (v595) then
																u89[v594 + 1] = v597;
																u85 = v172[1];
															end
														end
													else
														if (v173 == 61) then
															u89[v172[6]] = v172[5] - v172[4];
														else
															u89[v172[6]] = u89[v172[1]] ~= u89[v172[3]];
														end
													end
												else
													if (v173 < 58) then
														u89[v172[6]] = u89[v172[1]] - u89[v172[3]];
													else
														if (v173 == 59) then
															local v598 = v172[6];
															local v599 = v598;
															local v600, v601, v602 = u89[v598]();
															local v603 = v601;
															local v604 = v602;
															if (v600) then
																u89[v599 + 1] = v603;
																u89[v599 + 2] = v604;
																u85 = v172[1];
															end
														else
															u86 = v172[6];
															u89[u86] = u89[u86]();
														end
													end
												end
											end
										else
											if (v173 < 78) then
												if (v173 >= 74) then
													if (v173 >= 76) then
														if (v173 == 77) then
															u89[v172[6]] = v172[5] + u89[v172[3]];
														else
															u89[v172[6]] = u89[v172[1]] % u89[v172[3]];
														end
													else
														if (v173 == 75) then
															local v605 = u89[v172[1]];
															if (v605 ~= u89[v172[3]]) then
																u85 = v172[6];
															end
														else
															local v606 = v172[6];
															u89[v606] = u89[v606](u89[v606 + 1]);
															u86 = v606;
														end
													end
												else
													if (v173 >= 72) then
														if (v173 == 73) then
															local v607 = u89[v172[1]];
															if (not (v607 < v172[4])) then
																u85 = v172[6];
															end
														else
															u91[v172[5]] = u89[v172[6]];
														end
													else
														local v608 = v172[6];
														local v609 = v608;
														local v610 = u89[v608];
														local v611 = (v172[3] - 1) * 50;
														local v612 = 1;
														local v613 = u86 - v608;
														local v614 = v613;
														local v615 = v612;
														if (not (v613 <= v615)) then
															while true do
																v610[v611 + v612] = u89[v609 + v612];
																local v616 = v612 + 1;
																v612 = v616;
																local v617 = v614;
																if (v617 < v616) then
																	break;
																end
															end
														end
													end
												end
											else
												if (v173 < 81) then
													if (v173 < 79) then
														local v618 = u88 - u76;
														local v619 = v172[6];
														if (v618 < 0) then
															v618 = -1;
														end
														local v620 = v619;
														local v621 = v619 + v618;
														local v622 = v621;
														local v623 = v620;
														if (not (v621 <= v623)) then
															while true do
																u89[v620] = u87[(u76 + (v620 - v619)) + 1];
																local v624 = v620 + 1;
																v620 = v624;
																local v625 = v622;
																if (v625 < v624) then
																	break;
																end
															end
														end
														u86 = v619 + v618;
													else
														if (v173 == 80) then
															u86 = v172[6];
															u89[u86]();
															u86 = u86 - 1;
														else
															u89[v172[6]] = u89[v172[3]] < u89[v172[1]];
														end
													end
												else
													if (v173 < 83) then
														if (v173 == 82) then
															u89[v172[6]] = v172[5] ^ u89[v172[3]];
														else
															local v626 = v172[6];
															u89[v626](u17(u89, v626 + 1, u86));
															u86 = v626 - 1;
														end
													else
														if (v173 == 84) then
															u89[v172[6]] = u89[v172[1]] <= v172[4];
														else
															u89[v172[6]] = u89[v172[1]] - v172[4];
														end
													end
												end
											end
										end
									end
								end
							end
						end);
						local v631 = v628;
						local v632 = v629;
						local v633 = v630;
						if (v627) then
							if (v631) then
								if (v633 == 1) then
									return v152[v632]();
								end
								return v152[v632](u17(v152, v632 + 1, u86));
							end
							if (v632) then
								return u17(v152, v632, v633);
							end
						else
							local v634 = u71(v631);
							if (v634 == "string") then
								if (u3(v631, "attempt to yield across metamethod/C%-call boundary")) then
									return u64();
								end
								if (u3(v631, "^.-:%d+: ")) then
									u72("Luraph Script:" .. ((u83[u85 - 1] or "(internal)") .. (": " .. u73(v631))), 0);
								else
									u72(v631, 0);
								end
							else
								u72(v631, 0);
							end
						end
					end;
					if (u62) then
						u62(u84, p67);
					end
					return u84;
				end;
				v134 = 3;
			end
		end
		if (v134 > 2) then
			break;
		end
	end
	local u95 = p29;
	local u96 = p16;
	local u97 = p13;
	local u98 = 2;
	local u99 = p3;
	local u100 = g_next_4;
	local u101 = p30;
	local u102 = v79;
	local u103 = p9;
	local f_St;
	f_St = function() -- [line 3] St
		--[[
			Upvalues: 
				[1] = u95
				[2] = u31
				[3] = u58
				[4] = u96
				[5] = u20
				[6] = u34
				[7] = u97
				[8] = u98
				[9] = u99
				[10] = u2
				[11] = u47
				[12] = u33
				[13] = u32
				[14] = u53
				[15] = u57
				[16] = u54
				[17] = u46
				[18] = u52
				[19] = u100
				[20] = u6
				[21] = u29
				[22] = u101
				[23] = u102
				[24] = u103
		--]]
		local v635 = nil;
		local v636 = nil;
		local v637 = nil;
		local v638 = 0;
		local v639 = v638;
		if (not (v639 >= 2)) then
			while true do
				if (v638 <= 0) then
					v635 = {};
				else
					if (v638 == 1) then
						v636 = {
							{},
							{},
							u95,
							nil,
							u95,
							{},
							nil,
							u95,
							nil
						};
					else
						v637 = v636[2];
					end
				end
				local v640 = v638 + 1;
				v638 = v640;
				if (v640 > 2) then
					break;
				end
			end
		end
		local v641 = u31() - 55660;
		local v642 = nil;
		local v643 = 3;
		while (v643 < 4) do
			if (v643 <= 1) then
				if (v643 == 0) then
					v642 = {};
					v643 = 1;
				else
					v636[5] = u34();
					v643 = 4;
				end
			else
				if (v643 == 2) then
					v636[13] = u20();
					v643 = 0;
				else
					local v644 = 1;
					local v645 = v641;
					local v646 = v645;
					local v647 = v644;
					if (not (v645 <= v647)) then
						while true do
							local v648 = false;
							local v649 = nil;
							local v650 = nil;
							local v651 = nil;
							local v652 = nil;
							local v653 = nil;
							local v654 = nil;
							local v655 = nil;
							local v656 = 0;
							local v657 = v656;
							if (v657 >= 2) then
								v648 = true;
							else
								while true do
									if (v656 <= 0) then
										v649 = u58();
										v650 = u58();
										v651 = u58();
										v652 = u58();
									else
										if (v656 == 1) then
											v653 = v651 % 4;
											v654 = v652 % 4;
											v655 = v650 % 4;
										else
											local v658 = {};
											v658[3] = (v650 - v655) / 4;
											v658[5] = v654;
											v658[2] = v653;
											v658[7] = v649;
											v658[1] = (v652 - v654) / u96;
											v658[6] = (v651 - v653) / 4;
											v658[4] = v655;
											v637[v644] = v658;
										end
									end
									local v659 = v656 + 1;
									v656 = v659;
									if (v659 > 2) then
										break;
									end
								end
								v648 = true;
							end
							if (v648) then
								local v660 = v644 + 1;
								v644 = v660;
								local v661 = v646;
								if (v661 < v660) then
									break;
								end
							end
						end
					end
					v643 = 2;
				end
			end
		end
		local v662 = v636[1];
		local v663 = 2;
		local v664 = nil;
		local v665 = nil;
		while true do
			if (v663 <= 1) then
				if (v663 == 0) then
					v636[3] = v642;
					v663 = 4;
				else
					local v666 = false;
					local v667 = u97;
					local v668 = v664;
					local v669 = v668;
					local v670 = v667;
					if (v668 <= v670) then
						v666 = true;
					else
						while true do
							local v671 = false;
							local v672 = u31();
							local v673 = nil;
							local v674 = nil;
							local v675 = 0;
							local v676 = v675;
							if (v676 >= 2) then
								v671 = true;
							else
								while true do
									local v677 = false;
									if (v675 <= 0) then
										v673 = u31();
										v677 = true;
									else
										if (v675 == 1) then
											v674 = u31();
											v677 = true;
										else
											local v678 = v672;
											local v679 = v673;
											local v680 = v679;
											local v681 = v678;
											if (v679 <= v681) then
												v677 = true;
											else
												while true do
													v662[v678] = v674;
													local v682 = v678 + 1;
													v678 = v682;
													local v683 = v680;
													if (v683 < v682) then
														break;
													end
												end
												v677 = true;
											end
										end
									end
									if (v677) then
										local v684 = v675 + 1;
										v675 = v684;
										if (v684 > 2) then
											break;
										end
									end
								end
								v671 = true;
							end
							if (v671) then
								local v685 = v667 + 1;
								v667 = v685;
								local v686 = v669;
								if (v686 < v685) then
									break;
								end
							end
						end
						v666 = true;
					end
					if (v666) then
						v663 = 3;
					end
				end
			else
				if (v663 == 2) then
					v664 = u31();
					v663 = 1;
				else
					v665 = 1;
					v663 = 0;
				end
			end
			if (v663 >= 4) then
				break;
			end
		end
		local v687 = 1;
		local v688 = u34();
		local v689 = v688;
		local v690 = v687;
		if (not (v688 <= v690)) then
			while true do
				v642[v687] = {
					u20(),
					u34()
				};
				local v691 = v687 + 1;
				v687 = v691;
				local v692 = v689;
				if (v692 < v691) then
					break;
				end
			end
		end
		v636[12] = u20();
		local v693 = u31() - 95690;
		local v694 = v636[6];
		local v695 = 0;
		local v696 = nil;
		while true do
			if (v695 <= 0) then
				local v697 = 0;
				local v698 = v693 - 1;
				local v699 = v698;
				local v700 = v697;
				if (not (v698 <= v700)) then
					while true do
						v694[v697] = u98();
						local v701 = v697 + 1;
						v697 = v701;
						local v702 = v699;
						if (v702 < v701) then
							break;
						end
					end
				end
				v695 = 1;
			else
				if (v695 == 1) then
					v696 = {};
					v695 = 2;
				else
					break;
				end
			end
		end
		local v703 = u31() - 20472;
		local v704 = 2;
		local v705 = nil;
		local v706 = nil;
		while (v704 < 4) do
			if (v704 <= 1) then
				if (v704 == 0) then
					v706 = u20() ~= u99;
					v704 = 3;
				else
					v636[8] = u34();
					v704 = 4;
				end
			else
				if (v704 == 2) then
					v705 = u20();
					v704 = 0;
				else
					local v707 = 1;
					local v708 = v703;
					local v709 = v708;
					local v710 = v707;
					if (not (v708 <= v710)) then
						while true do
							local v711 = u95;
							local v712 = u20();
							if (v712 == 217) then
								v711 = u20() == 1;
							else
								if (v712 == 219) then
									v711 = u2(u47(v705), u33() + u31());
								else
									if (v712 == 32) then
										v711 = u33();
									else
										if (v712 == 185) then
											v711 = u33() + u31();
										else
											if (v712 == 54) then
												v711 = u32();
											else
												if (v712 == 115) then
													v711 = u33();
												else
													if (v712 == 145) then
														v711 = u33();
													else
														if (v712 == 29) then
															v711 = u31() + (u53(u31()) * 4294967296);
														else
															if (v712 == 87) then
																v711 = u57(0, u33());
															else
																if (v712 == 216) then
																	v711 = u31() + (u54(u31()) * 4294967296);
																else
																	if (v712 == 100) then
																		v711 = u2(u47(v705), 6);
																	end
																end
															end
														end
													end
												end
											end
										end
									end
								end
							end
							local v713 = {
								v711,
								{}
							};
							v635[v707 - 1] = v665;
							local v714 = 2;
							while (not (v714 <= 0)) do
								if (v714 == 1) then
									v665 = v665 + 1;
									v714 = 0;
								else
									v696[v665] = v713;
									v714 = 1;
								end
							end
							if (v706) then
								u46[u52] = v713;
								u52 = u52 + 1;
							end
							local v715 = v707 + 1;
							v707 = v715;
							local v716 = v709;
							if (v716 < v715) then
								break;
							end
						end
					end
					v704 = 1;
				end
			end
		end
		local v717 = 1;
		local v718 = v641;
		local v719 = v718;
		local v720 = v717;
		if (not (v718 <= v720)) then
			while true do
				local v721 = v636[2][v717];
				local v722 = u100;
				local v723 = u6;
				local v724 = nil;
				while true do
					local v725, v726 = v722(v723, v724);
					local v727 = v725;
					local v728 = v726;
					if (v725) then
						break;
					end
					v724 = v727;
					local v729 = 1;
					local v730 = nil;
					local v731 = nil;
					while true do
						if (v729 <= 0) then
							v731 = v721[v730];
							v729 = 2;
						else
							if (v729 == 1) then
								v730 = u29[v728];
								v729 = 0;
							else
								break;
							end
						end
					end
					if (v731 == u101) then
						local v732 = nil;
						local v733 = nil;
						local v734 = 1;
						while (v734 <= 2) do
							if (v734 <= 0) then
								v733 = v696[v732];
								v734 = 2;
							else
								if (v734 == 1) then
									v732 = v635[v721[v728]];
									v734 = 0;
								else
									if (v733) then
										v721[v730] = v733[1];
										local v735 = nil;
										local v736 = 0;
										local v737 = v736;
										if (not (v737 >= 1)) then
											while true do
												if (v736 == 0) then
													v735 = v733[2];
												else
													v735[(#v735) + 1] = {
														v721,
														v730
													};
												end
												local v738 = v736 + 1;
												v736 = v738;
												if (v738 > 1) then
													break;
												end
											end
										end
									end
									v734 = 3;
								end
							end
						end
					else
						if (v731 == 1) then
							v721[v728] = (v717 + v721[v728]) + 1;
						end
					end
				end
				local v739 = v717 + 1;
				v717 = v739;
				local v740 = v719;
				if (v740 < v739) then
					break;
				end
			end
		end
		local v741 = nil;
		local v742 = 0;
		local v743 = v742;
		if (not (v743 >= 7)) then
			while true do
				if (v742 <= 3) then
					if (v742 <= 1) then
						if (v742 == 0) then
							v636[10] = u31();
						else
							v741 = u20();
						end
					else
						if (v742 == 2) then
							v636[4] = u102(v741, u97, 1) ~= 0;
						else
							v636[7] = u102(v741, 2, 1) ~= 0;
						end
					end
				else
					if (v742 <= 5) then
						if (v742 == 4) then
							v636[9] = u34();
						else
							v636[u103] = u20();
						end
					else
						if (v742 == 6) then
							v636[19] = u20();
						else
							break;
						end
					end
				end
				local v744 = v742 + 1;
				v742 = v744;
				if (v744 > 7) then
					break;
				end
			end
			return v636;
		end
	end;
	local v745 = u59(f_St(), u12, p29)(f_St, p40, v135, v133, u33, u20, u31, p42);
	local g_rawset_13 = rawset;
	return u59(v745, u12, p29);
end)(coroutine.wrap, 33554432, 0, 2097152, 42, string, coroutine.yield, 8, 17, 256, 13, table, 1, 31, bit32, 4, string.match, 12, 11, type, string.gsub, 536870912, 5, assert, 15, collectgarbage, table.insert, "lshift", nil, 2, "band", _ENV, 20, 7, 9, 6, 16, "Your environment does not support LuaJIT's FFI library, therefore you cannot use LL/ULL/i suffixes.", 14, function(...) -- [line 3] anonymous function
	(...)[...] = nil;
end, {}, {
	50257,
	2818417197,
	1960454203,
	1358019699,
	1125685435,
	2645296194,
	1858093560,
	543933520,
	3947684352
})(...);
